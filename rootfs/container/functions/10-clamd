# SPDX-FileCopyrightText: Â© 2025 Nfrastack <code@nfrastack.com>
#
# SPDX-License-Identifier: MIT

clamd_parse_args() {
    if var_true "${CLAMD_DEBUG_MODE}" ; then
        debug_arg="--debug"
    fi
}

freshclam_parse_args() {
    if var_true "${FRESHCLAM_DEBUG_MODE}" ; then
        debug_arg="--debug"
    fi

    if var_true "${LOG_VERBOSE}" ; then
        conf_log_verbose="LogVerbose yes"
        log_verbose="--verbose"
    fi
}

clamav_bootstrap_filesystem() {
    create_folder \
                    "${DATA_PATH},\
                    $(dirname ${CLAMD_LOCAL_SOCKET}),\
                    ${CLAMD_TEMP_PATH},\
                    ${CONFIG_PATH},\
                    ${DEFINITIONS_PATH},\
                    ${LOG_PATH}" \
                    clamav:clamav 755

    rm -rf /var/lib/clamav
    ln -sf "${DEFINITIONS_PATH}" /var/lib/clamav
}

clamav_configure_logging() {
    case "${LOG_TYPE,,}" in
        file | both)
            create_logrotate clamav "${LOG_PATH}"/"${LOG_FILE_CLAMD}" clamav clamav clamav
            create_logrotate clamav "${LOG_PATH}"/"${LOG_FILE_FRESHCLAM}" clamav clamav clamav
        ;;
    esac
}

clamd_generate_configuration() {
    clamd_parse_args
	truefalse_yesno DISABLE_CERT_CHECK
	truefalse_yesno ENABLE_ALGORITHMIC_DETECTION
	truefalse_yesno ENABLE_BYTECODE
	truefalse_yesno ENABLE_DETECT_PUA
	truefalse_yesno ENABLE_PHISHING_SCAN_URLS
	truefalse_yesno ENABLE_PHISHING_SIGNATURES
    truefalse_yesno ENABLE_SCAN_ARCHIVE
	truefalse_yesno ENABLE_SCAN_ELF
	truefalse_yesno ENABLE_SCAN_HTML
	truefalse_yesno ENABLE_SCAN_MAIL
	truefalse_yesno ENABLE_SCAN_OLE2
	truefalse_yesno ENABLE_SCAN_PDF
	truefalse_yesno ENABLE_SCAN_PE
	truefalse_yesno ENABLE_SCAN_SWF
	exclude_pua_array=$(echo "$EXCLUDE_PUA" | tr "," "\n")
		for pua in $exclude_pua_array
		do
    		excluded_pua=${excluded_pua}$(cat <<EOF

ExcludePUA              ${pua}
EOF
		)
	done

	include_pua_array=$(echo "$INCLUDE_PUA" | tr "," "\n")
		for pua in $include_pua_array
		do
    		included_pua=${included_pua}$(cat <<EOF

IncludePUA              ${pua}
EOF
		)
	done

    print_notice "Generating Configuration for Clam Antivirus"
	cat <<EOF | silent sudo -u clamav tee "${CONFIG_PATH}"/"${CLAMD_CONFIG_FILE}"
## Custom Generated ${IAMGE_NAME} Clam Antivirus Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set CLAMAV_SETUP_TYPE=MANUAL when starting container
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

###############
# General
###############

User                        clamav
Foreground                  yes
LocalSocket                 ${CLAMD_LOCAL_SOCKET}
PidFile                     $(dirname "${CLAMD_LOCAL_SOCKET}")/clamd.pid
TCPSocket                   ${LISTEN_PORT}
DatabaseDirectory           ${DEFINITIONS_PATH}
TemporaryDirectory          ${CLAMD_TEMP_PATH}
MaxThreads                  ${MAX_THREADS}
LogFileUnlock               yes
LogTime                     yes
ConcurrentDatabaseReload    ${CONCURRENT_DATABASE_RELOAD}
${conf_log_verbose}

###############
# Results
###############

DetectPUA                   ${ENABLE_DETECT_PUA}
${excluded_pua}
${included_pua}
AlgorithmicDetection        ${ENABLE_ALGORITHMIC_DETECTION}
Bytecode                    ${ENABLE_BYTECODE}

###############
# Scan
###############

DisableCertCheck            ${DISABLE_CERT_CHECK}
PhishingScanURLs            ${ENABLE_PHISHING_SCAN_URLS}
PhishingSignatures          ${ENABLE_PHISHING_SIGNATURES}
ScanArchive                 ${ENABLE_SCAN_ARCHIVE}
ScanELF                     ${ENABLE_SCAN_ELF}
ScanHTML                    ${ENABLE_SCAN_HTML}
ScanMail                    ${ENABLE_SCAN_MAIL}
ScanOLE2                    ${ENABLE_SCAN_OLE2}
ScanPDF                     ${ENABLE_SCAN_PDF}
ScanPE                      ${ENABLE_SCAN_PE}
ScanSWF                     ${ENABLE_SCAN_SWF}

###############
# Scan Options
###############

MaxScanSize                 ${MAX_SCAN_SIZE}
MaxFileSize                 ${MAX_FILE_SIZE}
MaxRecursion                ${MAX_RECURSION}
MaxFiles                    ${MAX_FILES}
MaxEmbeddedPE               ${MAX_EMBEDDEDPE}
MaxHTMLNormalize            ${MAX_HTMLNORMALIZE}
MaxHTMLNoTags               ${MAX_HTMLNOTAGS}
MaxScriptNormalize          ${MAX_SCRIPTNORMALIZE}
MaxZipTypeRcg               ${MAX_ZIPTYPERCG}
MaxPartitions               ${MAX_PARTITIONS}
MaxIconsPE                  ${MAX_ICONSPE}
MaxRecHWP3                  ${MAX_RECHWP3}
PCREMatchLimit              ${PCRE_MATCH_LIMIT}
PCRERecMatchLimit           ${PCRE_RECMATCH_LIMIT}
PCREMaxFileSize             ${PCRE_MAX_FILE_SIZE}
StreamMaxLength             ${STREAM_MAX_LENGTH}

###############
# Alert Options
###############
AlertEncryptedArchive       ${ENABLE_ALERT_ENCRYPTED_ARCHIVE}
AlertEncryptedDoc           ${ENABLE_ALERT_ENCRYPTED_DOC}
AlertOLE2Macros             ${ENABLE_ALERT_OLE2_MACROS}
AlertExceedsMax             ${ENABLE_ALERT_EXCEEDS_MAX}
EOF

    echo "alias clamscan='clamscan -d ${DEFINITIONS_PATH}'" > /root/.bashrc
}

freshclam_generate_configuration() {
    print_notice "Generating Configuration for Freshclam definitions updater"
    if [ -n "${FRESHCLAM_DATABASES}" ] ; then
        custom_db=$(echo "${FRESHCLAM_DATABASES}" | tr "," "\n" | sed -e 's/^/DatabaseCustomURL /')
    fi

    cat <<EOF | silent sudo -u clamav tee "${CONFIG_PATH}"/"${FRESHCLAM_CONFIG_FILE}"
## Custom Generated ${IMAGE_NAME} Freshclam Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set FRESHCLAM_SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)
DatabaseOwner               clamav
PidFile                     $(dirname "${CLAMD_LOCAL_SOCKET}")/freshclam.pid
DatabaseDirectory           ${DEFINITIONS_PATH}
DatabaseMirror              database.clamav.net
ScriptedUpdates             yes
LogTime                     yes
${custom_db}
EOF
}